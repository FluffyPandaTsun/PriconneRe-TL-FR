Write-Output "Latest tag: $(git describe --tags --abbrev=0)`n"

$ChangedFiles = git diff --find-renames --name-status (git describe --tags --abbrev=0)
$LogIndexing = @{
    "src/BepInEx/config/.+" = "default config file";
    "src/BepInEx/core/.+" = "BepInEx core files";
    "src/BepInEx/plugins/FullScreenizer.dll" = "FullScreenizer";
    "src/BepInEx/plugins/PriconneTLFixup.dll" = "PriconneTLFixup";
    "src/BepInEx/plugins/XUnity.AutoTranslator" = "XUAT";
    "src/BepInEx/plugins/XUnity.ResourceRedirector" = "XURR";
    "src/.+" = "framework files"
}

Write-Output "::group::Changed Files"
Write-Output $ChangedFiles
Write-Output "::endgroup::`n"

Write-Output "::group::Convertion"
$Text = [System.Text.StringBuilder]""
$Texture = [System.Text.StringBuilder]""
$Other = [System.Text.StringBuilder]""
foreach ($file in $ChangedFiles) {
    $Log = [System.Text.StringBuilder]""
    $FileWStatus = $file.Split("`t")
    switch -Wildcard ($FileWStatus[0]) {
        "A*" {
            $null = $Log.Append("- Added ")
            $FileName = $FileWStatus[1]
        }
        "M*" {
            $null = $Log.Append("- Updated ")
            $FileName = $FileWStatus[1]
        }
        "R*" {
            $null = $Log.Append("- Updated ")
            $FileName = $FileWStatus[2]
        }
        "D*" {
            $null = $Log.Append("- Deleted ")
            $FileName = $FileWStatus[1]
        }
    }
    if ($file -match "src/BepInEx/Translation/.+" -and $file -notmatch ".+_AutoGeneratedTranslations.txt$") {
        $Splitted = $FileName.Split("/")
        if ("Text" -in $Splitted) {
            if ( $Splitted[6] ) {
                $null = $Log.Append($Splitted[5] + ": " + (Split-Path -LeafBase $FileName))
            }
            else {
                $null = $Log.Append((Split-Path -LeafBase $FileName))
            }
            $null = $Text.AppendLine($Log)
        }
        else {
            $null = $Log.Append($Splitted[5] + ": " + $Splitted[6].Split(" ")[0])
            $null = $Texture.AppendLine($Log)
        }
    }
    else {
        ($LogIndexing.PSOBject.Properties | Where-Object Name -eq "Keys").Value | ForEach-Object {
            if ($file -match $_) {
                $null = $Log.Append($LogIndexing.$_)
                $null = $Other.AppendLine($Log)
            }
        }
    }
    Write-Output "$file`n=> $Log"
}
Write-Output "::endgroup::`n"

$ListVar = "Text", "Texture", "Other"
"`n## Changelog`n" >> "./RELEASE_NOTE"
foreach ($VarName in $ListVar) {
    $Value = (Get-Variable -ValueOnly $VarName).ToString().Split("`n") | Get-Unique
    if ($Value) {
        "<details><summary>$VarName</summary>`n" >> "./RELEASE_NOTE"
        $Value >> "./RELEASE_NOTE"
        "</details>`n" >> "./RELEASE_NOTE"
    }
}

Write-Output "::group::Final Changelog"
Get-Content -Raw ./RELEASE_NOTE
Write-Output "::endgroup::`n"